import express = require("express");
import Web3 from "web3";
const HDWalletProvider = require("@truffle/hdwallet-provider");
const axios = require("axios");
const url = require('url')
import * as dotenv from "dotenv";
dotenv.config();
const PORT = Number(process.env.PORT) || 8081;
const CRON_ENV = process.env.CRON_ENV;
const BEARER_TOKEN = "AAAAAAAAAAAAAAAAAAAAAGpwbAEAAAAAFjGVXZf7P3TxBU1vTAm%2FW8nFF4M%3Dpwd9HyDyLGvkUFJQW8QMkpqcge5WI5IQU7ISDqNH0CrjijA5tH";
const TWITTER_URL = "https://api.twitter.com/2";
const TIPBOT_ID = "1474541604673560578";
const REQUEST_ACCEPTED = "JPYCの出金リクエストを受け付けました";

const app = express();
const address_whitelist = [
];

app.get("/", (req, res) => {

    //const tweet = req.query.tweet;
    const tweet = "https://twitter.com/nuko973663/status/1509018961509175298?s=20&t=THqWaA_pHtb4KbHNSqLSbw"
   
    const parse = url.parse(tweet).pathname.split("/")
    //res.json(parse[3]);
    func(res, parse[3]);
    //txidで検索
    //whitelistのアドレスから送金があるかどうか確認
    //署名を検証してアドレス取得
    //アドレスのmatic残高を確認0.1以下じゃないと使えない
    //アドレスにmaticを送金
    //txidを保存（二回使えない様に
});

const server = app.listen(PORT, () => {
  console.log(`App listening on port ${PORT}`);
});

const isWithdrawRequestTweet = async (tweet: string) => {
    //res.json('{ txid: ' + txid +' }');
    if(tweet == "" || tweet == null) {
        return falsee;
    }
    const searchTerm = "@tipjpyc withdraw ";
    const startIndex = tweet.indexOf(searchTerm);
    const withdrawRequestBody = tweet.slice(startIndex + searchTerm.length);
    const withdrawRequestBodyArray = withdrawRequestBody.split(" ");
    const amount = withdrawRequestBodyArray[0];
    const address = withdrawRequestBodyArray[1].split(/\n/);
    const isAddress = web3.utils.isAddress(address[0]);
}

const func = async (res: any, tweetId: string) => {
    const provider = new HDWalletProvider({
      mnemonic: process.env.MNEMONIC,
      providerOrUrl: process.env.PROVIDER_MUMBAI,
      chainId: 80001,
    });
    provider.engine._blockTracker._pollingInterval = 1800000;
 
    const web3 = new Web3(provider);
    const response = await axios.get(TWITTER_URL + '/tweets?ids=' + tweetId + "&tweet.fields=conversation_id" , {
      headers: {
        Authorization: `Bearer ${BEARER_TOKEN}`,
      }
    })

    isWithdrawRequestTweet(response.data.data.text);
    /*const userR = await axios.get(TWITTER_URL + '/users/by?usernames=tipjpyc', {
      headers: {
        Authorization: `Bearer ${BEARER_TOKEN}`,
      }
    })

    res.json(userR.data.data);*/


    const body = response.data.data;
    const conversationResponse = await axios.get(TWITTER_URL + '/tweets/search/recent?query=conversation_id:' + body[0].conversation_id + "&tweet.fields=author_id", {
      headers: {
        Authorization: `Bearer ${BEARER_TOKEN}`,
      }
    })

    res.json(conversationResponse.data.data);


};

